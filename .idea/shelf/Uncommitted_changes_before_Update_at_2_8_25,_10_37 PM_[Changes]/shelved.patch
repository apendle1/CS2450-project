Index: test/MachineTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import static org.junit.jupiter.api.Assertions.*;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\n\nclass MachineTest {\n\n    @Test\n    void runHaltTest(){\n        Machine a = new Machine();\n        a.memory.setWordSingle(0, 4300);\n        a.run();\n    }\n\n    @Test\n    void runScriptTest(){\n        //testing whether valid code will break the code\n        Machine a = new Machine();\n        a.memory.setWordSingle(0, 3000);\n        a.memory.setWordSingle(1, 3100);\n        a.memory.setWordSingle(2, 3200);\n        a.memory.setWordSingle(3, 3301);\n        a.memory.setWordSingle(4, 4300);\n        a.run();\n    }\n    @Test\n    void loadTest(){\n        Machine a = new Machine();\n        a.memory.setWordSingle(1, 3000);\n        a.load(01); //location will be written as a 2 digit location, will load that word into accumulator\n        Assertions.assertEquals(3000, a.accumulator);\n    }\n    @Test\n    void storeTest(){\n        Machine a = new Machine();\n        a.accumulator = 2500;\n        a.store(01);\n        Assertions.assertEquals(a.accumulator, a.memory.getWordSingle(01));\n\n        a.accumulator = 0;\n        a.store(02);\n        Assertions.assertEquals(a.accumulator, a.memory.getWordSingle(02));\n    }\n\n    @Test\n    void writeTest(){//cant create a test for write without a return type\n        Machine a = new Machine();\n        a.write(01);\n        Assertions.assertEquals(1001,1001);\n    }\n\n    @Test\n    void sumTest(){\n        Machine a = new Machine();\n        a.memory.setWordSingle(90, 423);//variable 1\n        a.memory.setWordSingle(91, 201);//variable 2\n        a.memory.setWordSingle(0, 3090);//add variable 1 to accumulator\n        a.memory.setWordSingle(1, 3091);//add variable 2 to accumulator\n        a.memory.setWordSingle(2, 2199);//store accumulator in memory 99\n        a.memory.setWordSingle(3, 4300);//halt\n        a.run();\n        Assertions.assertEquals(3090, a.memory.getWordSingle(0));\n        Assertions.assertEquals(624, a.accumulator);\n        Assertions.assertEquals(624, a.memory.getWordSingle(99));\n    }\n\n    @Test\n    void branchTest(){\n        Machine a = new Machine();\n        a.memory.setWordSingle(0, 4002);//skip to line 2\n        a.memory.setWordSingle(1, 3000);//add the value of line zero (should be skipped)\n        a.memory.setWordSingle(2, 4300);//halt\n        a.run();\n        Assertions.assertEquals(0, a.accumulator);\n    }\n\n    @Test\n    void branchNegTest(){\n        Machine a = new Machine();\n        a.memory.setWordSingle(90, 20);//var1\n        a.memory.setWordSingle(91, -50);//var2\n        a.memory.setWordSingle(0, 4104);//if neg branch to 4 (should not branch)\n        a.memory.setWordSingle(1, 3091);//add -50 to accumulator\n        a.memory.setWordSingle(2, 4104);//if neg branch to 4 (should branch)\n        a.memory.setWordSingle(3, 3090);//add 20 to accumulator (should be skipped)\n        a.memory.setWordSingle(4, 4300);//halt\n        a.run();\n        Assertions.assertEquals(-50, a.accumulator);\n    }\n\n    @Test\n    void branchZeroTest(){\n        Machine a = new Machine();\n        a.memory.setWordSingle(90, 1111);//var1\n        a.memory.setWordSingle(0, 4202);//jump to line 2 if zero\n        a.memory.setWordSingle(1, 3090);//add var1 to accumulator (should be skipped)\n        a.memory.setWordSingle(2, 4300);//halt\n        a.run();\n        Assertions.assertEquals(0, a.accumulator);\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/MachineTest.java b/test/MachineTest.java
--- a/test/MachineTest.java	(revision b075fa9b0a36c19f573de77763a707071221563f)
+++ b/test/MachineTest.java	(date 1739079397959)
@@ -100,4 +100,75 @@
         Assertions.assertEquals(0, a.accumulator);
     }
 
+    @Test
+    void testAdd_PositiveNumbers() {
+        Machine a = new Machine();
+        a.accumulator = 10;
+        a.memory.setWordSingle(0, 5);
+        a.add(0);
+        assertEquals(15, a.accumulator);
+    }
+
+    @Test
+    void testAdd_NegativeNumbers() {
+        Machine a = new Machine();
+        a.accumulator = 10;
+        a.memory.setWordSingle(1, -3);
+        a.add(1);
+        assertEquals(7, a.accumulator);
+    }
+
+    @Test
+    void testSubtract_PositiveNumbers() {
+        Machine a = new Machine();
+        a.accumulator = 20;
+        a.memory.setWordSingle(0, 5);
+        a.subtract(0);
+        assertEquals(15, a.accumulator);
+    }
+
+    @Test
+    void testSubtract_NegativeNumbers() {
+        Machine a = new Machine();
+        a.accumulator = 10;
+        a.memory.setWordSingle(1, -3);
+        a.subtract(1);
+        assertEquals(13, a.accumulator);
+    }
+
+    @Test
+    void testDivide_PositiveNumbers() {
+        Machine a = new Machine();
+        a.accumulator = 20;
+        a.memory.setWordSingle(0, 5);
+        a.divide(0);
+        assertEquals(4, a.accumulator);
+    }
+
+    @Test
+    void testDivide_ByZero() {
+        Machine a = new Machine();
+        a.accumulator = 10;
+        a.memory.setWordSingle(1, 0);
+        assertThrows(ArithmeticException.class, () -> a.divide(1));
+    }
+
+    @Test
+    void testMultiply_PositiveNumbers() {
+        Machine a = new Machine();
+        a.accumulator = 3;
+        a.memory.setWordSingle(0, 4);
+        a.multiply(0);
+        assertEquals(12, a.accumulator);
+    }
+
+    @Test
+    void testMultiply_WithZero() {
+        Machine a = new Machine();
+        a.accumulator = 7;
+        a.memory.setWordSingle(1, 0);
+        a.multiply(1);
+        assertEquals(0, a.accumulator);
+    }
+
 }
\ No newline at end of file
Index: src/Machine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.File;\nimport java.io.FileNotFoundException;\nimport java.util.Scanner;\n\nimport java.util.Scanner;\n\nimport static java.sql.Types.NULL;\n\npublic class Machine {\n    //constructor: builds memory\n    Memory memory;\n    int accumulator = 0;\n    Scanner scanner = new Scanner(System.in);\n    public Machine(){\n        memory = new Memory();\n    }\n    //run\n    public void run(){\n        //while loop\n        boolean finished = false;\n        accumulator = 0;\n        int index = 0;\n        while(!finished){\n            int command = memory.getWordSingle(index);\n            int argument = command % 100;\n            switch(command / 100){\n                case 10:\n                    //read\n                    read(argument);\n                    break;\n                case 11:\n                    //write\n                    write(argument);\n                    break;\n                case 20:\n                    //load\n                    load(argument);\n                    break;\n                case 21:\n                    //store\n                    store(argument);\n                    break;\n                case 30:\n                    //add\n                    add(argument);\n                    break;\n                case 31:\n                    //subtract\n                    subtract(argument);\n                    break;\n                case 32:\n                    //divide\n                    divide(argument);\n                    break;\n                case 33:\n                    //multiply\n                    multiply(argument);\n                    break;\n                case 40:\n                    //branch\n                    index = branch(argument);\n                    break;\n                case 41:\n                    //branchneg\n                    if(branchneg(argument) > 0){\n                        index = branch(argument);\n                    }\n                    break;\n                case 42:\n                    //branchzero\n                    if(branchzero(argument) > 0){\n                        index = branch(argument);\n                    }\n                    break;\n                case 43:\n                    //halt\n                    System.out.println(\"Halt reached Successfully\");\n                    finished = true;\n                    break;\n                default:\n                    System.out.println(\"Reached invalid line\");\n                    finished = true;\n                    //invalid input\n            }\n            //finished = true; //for testing purposes I've closed this loop until we begin actually developing it (Austin Pendley 2/1/2025)\n            index++;\n        }\n    }\n\n    //load\n    public void load(int i){\n        //add the number to the accumulator\n        accumulator = memory.getWordSingle(i);\n    }\n\n    //read\n    public void read(int i){\n        boolean conintueloop = true;\n        while(conintueloop) {\n            System.out.print(\"Enter a word (Max 4-digit number):\");\n            int word = scanner.nextInt();\n            //error trap var word\n            if (String.valueOf(Math.abs(word)).length() <= 4) {//if not valid input(less than length 4):\n                System.out.println(\"Invalid word\");\n                conintueloop = true;//prompt another number\n            } else {//if valid input:\n                memory.setWordSingle(i, word);\n                conintueloop = false;//send it to memory class\n            }\n\n        }\n\n    }\n\n    //write\n    public void write(int location){\n        if(location == NULL){//\n            System.out.print(\"location in memory is NULL\");\n        }else{\n            System.out.println(\"location \" + location + \" in memory: \" + memory.getWordSingle(location));\n        }\n    }\n\n    //parse\n    public void parse(File file) throws FileNotFoundException {\n        int word_size = 4;\n        int min_value = -9999;\n        int max_value = 9999;\n        int index = 0;\n        Scanner scanner = new Scanner(file);\n\n        while (scanner.hasNextLine() && index < 100) {\n            String line = scanner.nextLine().trim(); //parse through each line\n            try {\n                int value = Integer.parseInt(line); // convert a string in line as ints\n                if (value >= min_value && value <= max_value) {\n                    memory.setWordSingle(index, value);\n                } else {\n                    // catches words longer than 4 numbers\n                    System.err.println(\"Invalid word size (not \" + word_size + \") at index \" + index);\n                }\n            } catch (NumberFormatException e) {\n                // catches words that are not numbers\n                System.err.println(\"Error parsing line \" + index + \": \" + line);\n            }\n            index++;\n        }\n        scanner.close();\n    }\n\n    //store\n    public void store(int location){\n        memory.setWordSingle(location, accumulator);\n    }\n\n\n    public void add(int mem_index){\n        //add - adds word from location in memory with accumulator\n        // leaves result in accumulator\n        //accumulator += mem_index\n        accumulator += memory.getWordSingle(mem_index); // updated just now\n    }\n\n\n    public void subtract(int mem_index){\n        //subtract - subtracts word from location in memory with accumulator\n        // leaves result in accumulator\n        accumulator -= memory.getWordSingle(mem_index);\n    }\n\n\n    public void divide(int mem_index){\n        //divide - divides word from location in memory with accumulator\n        // leaves result in accumulator\n        accumulator /= memory.getWordSingle(mem_index);\n    }\n\n    public void multiply(int mem_index){\n        //multiply - multiplies word from location in memory with accumulator\n        // leaves result in accumulator\n        accumulator *= memory.getWordSingle(mem_index);\n    }\n    //branch\n    public int branch(int i){\n        return (i % 100) - 1;\n    }\n\n    //branchneg\n    public int branchneg(int i){\n        return (accumulator < 0 ? i : -1) - 1;\n    }\n    //branchzero\n    public int branchzero(int i){\n        return (accumulator == 0 ? i : -1) - 1;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Machine.java b/src/Machine.java
--- a/src/Machine.java	(revision b075fa9b0a36c19f573de77763a707071221563f)
+++ b/src/Machine.java	(date 1739077003092)
@@ -97,10 +97,10 @@
     public void read(int i){
         boolean conintueloop = true;
         while(conintueloop) {
-            System.out.print("Enter a word (Max 4-digit number):");
+            System.out.print("Enter a word(4-digit number):");
             int word = scanner.nextInt();
             //error trap var word
-            if (String.valueOf(Math.abs(word)).length() <= 4) {//if not valid input(less than length 4):
+            if (String.valueOf(Math.abs(word)).length() != 4) {//if not valid input(less than length 4):
                 System.out.println("Invalid word");
                 conintueloop = true;//prompt another number
             } else {//if valid input:
@@ -182,15 +182,15 @@
     }
     //branch
     public int branch(int i){
-        return (i % 100) - 1;
+        return i % 100;
     }
 
     //branchneg
     public int branchneg(int i){
-        return (accumulator < 0 ? i : -1) - 1;
+        return accumulator < 0 ? i : -1;
     }
     //branchzero
     public int branchzero(int i){
-        return (accumulator == 0 ? i : -1) - 1;
+        return accumulator == 0 ? i : -1;
     }
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"883b1958-09a5-4b58-a2a8-6491e4c96c5e\" name=\"Changes\" comment=\"create repository\">\n      <change beforePath=\"$PROJECT_DIR$/src/Machine.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Machine.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/test/UnitTest.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/test/UnitTest.java\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"JUnit5 Test Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;apendle1&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\"><![CDATA[{\n  \"selectedUrlAndAccountId\": {\n    \"url\": \"https://github.com/Sebxs13/CS2450-project.git\",\n    \"accountId\": \"3b08e349-62c3-4180-a49f-68ece65c06d8\"\n  }\n}]]></component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 0\n}</component>\n  <component name=\"ProjectId\" id=\"2sGlQdgoEmbw7Qzvr7p3z546hZG\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;Application.Main.executor&quot;: &quot;Run&quot;,\n    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;false&quot;,\n    &quot;JUnit.MachineTest.executor&quot;: &quot;Run&quot;,\n    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,\n    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,\n    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\n    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary&quot;: &quot;JUnit5&quot;,\n    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5&quot;: &quot;&quot;,\n    &quot;create.test.in.the.same.root&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\n    &quot;last_directory_selection&quot;: &quot;/Users/austinpendley/Desktop/Group Project SE/CS2450-project/test&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/Users/austinpendley/Desktop/Group Project SE/CS2450-project&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CreateTestDialog.Recents.Supers\">\n      <recent name=\"\" />\n    </key>\n    <key name=\"CreateTestDialog.RecentsKey\">\n      <recent name=\"\" />\n    </key>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-jdk-9823dce3aa75-125ca727e0f0-intellij.indexing.shared.core-IU-243.23654.117\" />\n        <option value=\"bundled-js-predefined-d6986cc7102b-822845ee3bb5-JavaScript-IU-243.23654.117\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"883b1958-09a5-4b58-a2a8-6491e4c96c5e\" name=\"Changes\" comment=\"\" />\n      <created>1738089781104</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1738089781104</updated>\n      <workItem from=\"1738089782255\" duration=\"1038000\" />\n      <workItem from=\"1738285433681\" duration=\"1323000\" />\n      <workItem from=\"1738434438632\" duration=\"3020000\" />\n      <workItem from=\"1738807367216\" duration=\"3000\" />\n      <workItem from=\"1738807372678\" duration=\"267000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"create repository\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1738089984311</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1738089984311</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"2\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"create repository\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"create repository\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision b075fa9b0a36c19f573de77763a707071221563f)
+++ b/.idea/workspace.xml	(date 1739078292223)
@@ -4,9 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="883b1958-09a5-4b58-a2a8-6491e4c96c5e" name="Changes" comment="create repository">
+    <list default="true" id="883b1958-09a5-4b58-a2a8-6491e4c96c5e" name="Changes" comment="Added code for parse function and implemented arithmetic functions.">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Machine.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Machine.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/test/UnitTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/test/UnitTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/test/MachineTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/test/MachineTest.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -110,7 +111,15 @@
       <option name="project" value="LOCAL" />
       <updated>1738089984311</updated>
     </task>
-    <option name="localTasksCounter" value="2" />
+    <task id="LOCAL-00002" summary="Added code for parse function and implemented arithmetic functions.">
+      <option name="closed" value="true" />
+      <created>1738973253453</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1738973253453</updated>
+    </task>
+    <option name="localTasksCounter" value="3" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -129,6 +138,7 @@
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="create repository" />
-    <option name="LAST_COMMIT_MESSAGE" value="create repository" />
+    <MESSAGE value="Added code for parse function and implemented arithmetic functions." />
+    <option name="LAST_COMMIT_MESSAGE" value="Added code for parse function and implemented arithmetic functions." />
   </component>
 </project>
\ No newline at end of file
